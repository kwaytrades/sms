# Add this complete dashboard to your main.py

from fastapi.responses import HTMLResponse
import json
from datetime import datetime, timedelta
from typing import List, Dict, Any

# ===== DASHBOARD ENDPOINTS =====

@app.get("/userdashboard", response_class=HTMLResponse)
async def custom_dashboard():
    """Complete custom dashboard in a single HTML page"""
    return """
<!DOCTYPE html>
<html>
<head>
    <title>SMS Trading Bot Dashboard</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; background: #f8fafc; }
        .container { max-width: 1400px; margin: 0 auto; padding: 20px; }
        
        /* Header */
        .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; border-radius: 12px; margin-bottom: 30px; }
        .header h1 { font-size: 2.5em; margin-bottom: 10px; }
        .header p { opacity: 0.9; font-size: 1.1em; }
        
        /* Stats Cards */
        .stats-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin-bottom: 30px; }
        .stat-card { background: white; padding: 25px; border-radius: 12px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); border-left: 4px solid #667eea; }
        .stat-number { font-size: 3em; font-weight: bold; color: #2d3748; }
        .stat-label { color: #718096; font-size: 0.9em; text-transform: uppercase; letter-spacing: 0.5px; }
        .stat-change { margin-top: 8px; font-size: 0.85em; }
        .positive { color: #38a169; }
        .negative { color: #e53e3e; }
        
        /* Main Content Grid */
        .main-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 30px; margin-bottom: 30px; }
        
        /* Cards */
        .card { background: white; border-radius: 12px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); overflow: hidden; }
        .card-header { padding: 20px; border-bottom: 1px solid #e2e8f0; background: #f7fafc; }
        .card-title { font-size: 1.2em; font-weight: 600; color: #2d3748; }
        .card-content { padding: 20px; }
        
        /* Full Width Cards */
        .full-width { grid-column: 1 / -1; }
        
        /* Tables */
        .table-container { overflow-x: auto; }
        table { width: 100%; border-collapse: collapse; }
        th, td { text-align: left; padding: 12px; border-bottom: 1px solid #e2e8f0; }
        th { background: #f7fafc; font-weight: 600; color: #4a5568; font-size: 0.85em; }
        tr:hover { background: #f7fafc; }
        
        /* Buttons */
        .btn { padding: 10px 20px; border: none; border-radius: 6px; cursor: pointer; font-weight: 500; transition: all 0.2s; }
        .btn-primary { background: #667eea; color: white; }
        .btn-primary:hover { background: #5a67d8; }
        .btn-success { background: #38a169; color: white; }
        .btn-success:hover { background: #2f855a; }
        .btn-danger { background: #e53e3e; color: white; }
        .btn-danger:hover { background: #c53030; }
        .btn-sm { padding: 6px 12px; font-size: 0.85em; }
        
        /* Search and Filters */
        .search-bar { width: 100%; padding: 12px; border: 1px solid #e2e8f0; border-radius: 6px; margin-bottom: 20px; }
        .filters { display: flex; gap: 15px; margin-bottom: 20px; align-items: center; }
        .filter-select { padding: 8px 12px; border: 1px solid #e2e8f0; border-radius: 6px; }
        
        /* Loading and Status */
        .loading { text-align: center; padding: 40px; color: #718096; }
        .error { background: #fed7d7; color: #c53030; padding: 15px; border-radius: 6px; border: 1px solid #feb2b2; }
        .success { background: #c6f6d5; color: #2f855a; padding: 15px; border-radius: 6px; border: 1px solid #9ae6b4; }
        
        /* Badges */
        .badge { padding: 4px 8px; border-radius: 12px; font-size: 0.75em; font-weight: 500; }
        .badge-success { background: #c6f6d5; color: #2f855a; }
        .badge-warning { background: #faf089; color: #744210; }
        .badge-danger { background: #fed7d7; color: #c53030; }
        .badge-info { background: #bee3f8; color: #2c5282; }
        
        /* User Details Modal */
        .modal { display: none; position: fixed; z-index: 1000; left: 0; top: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); }
        .modal-content { background: white; margin: 5% auto; padding: 0; width: 90%; max-width: 800px; border-radius: 12px; max-height: 80vh; overflow-y: auto; }
        .modal-header { padding: 20px; border-bottom: 1px solid #e2e8f0; display: flex; justify-content: space-between; align-items: center; }
        .modal-body { padding: 20px; }
        .close { font-size: 28px; font-weight: bold; cursor: pointer; color: #718096; }
        .close:hover { color: #2d3748; }
        
        /* JSON Display */
        .json-display { background: #f7fafc; padding: 15px; border-radius: 6px; font-family: 'Monaco', 'Courier New', monospace; font-size: 0.85em; overflow-x: auto; }
        
        /* Responsive */
        @media (max-width: 768px) {
            .main-grid { grid-template-columns: 1fr; }
            .stats-grid { grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); }
            .filters { flex-direction: column; align-items: stretch; }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>ðŸ“± SMS Trading Bot Dashboard</h1>
            <p>Real-time monitoring and user management - Updated every 30 seconds</p>
        </div>

        <!-- Stats Overview -->
        <div class="stats-grid" id="stats-overview">
            <div class="stat-card">
                <div class="stat-number" id="total-users">-</div>
                <div class="stat-label">Total Users</div>
                <div class="stat-change positive" id="users-change">Loading...</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="active-today">-</div>
                <div class="stat-label">Active Today</div>
                <div class="stat-change positive" id="active-change">Loading...</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="total-messages">-</div>
                <div class="stat-label">Total Messages</div>
                <div class="stat-change positive" id="messages-change">Loading...</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="claude-usage">-</div>
                <div class="stat-label">Claude Usage %</div>
                <div class="stat-change positive" id="claude-change">Loading...</div>
            </div>
        </div>

        <div class="main-grid">
            <!-- Recent Users -->
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">ðŸ‘¥ Recent Users</h3>
                </div>
                <div class="card-content">
                    <div class="filters">
                        <input type="text" class="search-bar" id="user-search" placeholder="Search users..." onkeyup="filterUsers()">
                        <button class="btn btn-primary btn-sm" onclick="loadUsers()">ðŸ”„ Refresh</button>
                    </div>
                    <div class="table-container">
                        <table id="users-table">
                            <thead>
                                <tr>
                                    <th>Phone</th>
                                    <th>Messages</th>
                                    <th>Style</th>
                                    <th>Status</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody id="users-tbody">
                                <tr><td colspan="5" class="loading">Loading users...</td></tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- Real-time Activity -->
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">âš¡ Real-time Activity</h3>
                </div>
                <div class="card-content">
                    <div id="activity-feed">
                        <div class="loading">Loading activity...</div>
                    </div>
                    <button class="btn btn-success btn-sm" onclick="loadActivity()">ðŸ”„ Refresh Activity</button>
                </div>
            </div>
        </div>

        <!-- Recent Conversations -->
        <div class="card full-width">
            <div class="card-header">
                <h3 class="card-title">ðŸ’¬ Recent Conversations</h3>
            </div>
            <div class="card-content">
                <div class="filters">
                    <select class="filter-select" id="agent-filter" onchange="filterConversations()">
                        <option value="">All Agents</option>
                        <option value="claude">Claude</option>
                        <option value="openai">OpenAI</option>
                        <option value="hybrid">Hybrid</option>
                    </select>
                    <button class="btn btn-primary btn-sm" onclick="loadConversations()">ðŸ”„ Refresh</button>
                </div>
                <div id="conversations-list">
                    <div class="loading">Loading conversations...</div>
                </div>
            </div>
        </div>
    </div>

    <!-- User Details Modal -->
    <div id="user-modal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>User Details</h3>
                <span class="close" onclick="closeModal()">&times;</span>
            </div>
            <div class="modal-body" id="modal-body">
                Loading...
            </div>
        </div>
    </div>

    <script>
        // Global state
        let allUsers = [];
        let allConversations = [];
        let refreshInterval;

        // Initialize dashboard
        document.addEventListener('DOMContentLoaded', function() {
            loadDashboard();
            // Auto-refresh every 30 seconds
            refreshInterval = setInterval(loadDashboard, 30000);
        });

        // Load complete dashboard
        async function loadDashboard() {
            await Promise.all([
                loadStats(),
                loadUsers(),
                loadActivity(),
                loadConversations()
            ]);
        }

        // Load statistics
        async function loadStats() {
            try {
                const response = await fetch('/admin/data/analytics');
                const data = await response.json();
                
                if (data.error) return;

                // Update stat cards
                document.getElementById('total-users').textContent = data.users.total;
                document.getElementById('active-today').textContent = data.users.active_today;
                document.getElementById('total-messages').textContent = data.users.total_messages;
                
                // Calculate Claude usage percentage
                const claudeUsage = data.users.total > 0 ? Math.round((data.users.active_today / data.users.total) * 100) : 0;
                document.getElementById('claude-usage').textContent = claudeUsage + '%';

                // Update change indicators (mock data for demo)
                document.getElementById('users-change').textContent = '+' + Math.floor(Math.random() * 5) + ' this week';
                document.getElementById('active-change').textContent = '+' + Math.floor(Math.random() * 10) + '% today';
                document.getElementById('messages-change').textContent = '+' + Math.floor(Math.random() * 20) + ' today';
                document.getElementById('claude-change').textContent = '+' + Math.floor(Math.random() * 15) + '% this week';

            } catch (error) {
                console.error('Failed to load stats:', error);
            }
        }

        // Load users
        async function loadUsers() {
            try {
                const response = await fetch('/admin/data/users');
                const data = await response.json();
                
                if (data.error) {
                    document.getElementById('users-tbody').innerHTML = `<tr><td colspan="5" class="error">Error: ${data.error}</td></tr>`;
                    return;
                }

                allUsers = data.users;
                displayUsers(allUsers);

            } catch (error) {
                document.getElementById('users-tbody').innerHTML = `<tr><td colspan="5" class="error">Failed to load users: ${error.message}</td></tr>`;
            }
        }

        // Display users in table
        function displayUsers(users) {
            const tbody = document.getElementById('users-tbody');
            
            if (users.length === 0) {
                tbody.innerHTML = '<tr><td colspan="5" class="loading">No users found</td></tr>';
                return;
            }

            let html = '';
            users.forEach(user => {
                const personality = user.personality_data || {};
                const commStyle = personality.communication_style || {};
                const learningData = personality.learning_data || {};
                const totalMessages = learningData.total_messages || 0;

                const statusBadge = totalMessages > 0 ? 
                    `<span class="badge badge-success">Active</span>` : 
                    `<span class="badge badge-warning">New</span>`;

                html += `<tr>
                    <td>${user.phone_number}</td>
                    <td>${totalMessages}</td>
                    <td>${commStyle.formality || 'Unknown'}</td>
                    <td>${statusBadge}</td>
                    <td>
                        <button class="btn btn-primary btn-sm" onclick="viewUser('${user.phone_number}')">View</button>
                        <button class="btn btn-danger btn-sm" onclick="clearUser('${user.phone_number}')">Clear</button>
                    </td>
                </tr>`;
            });

            tbody.innerHTML = html;
        }

        // Load activity feed
        async function loadActivity() {
            try {
                const response = await fetch('/admin/data/conversations');
                const data = await response.json();
                
                if (data.error) {
                    document.getElementById('activity-feed').innerHTML = `<div class="error">Error: ${data.error}</div>`;
                    return;
                }

                let html = '';
                const recentActivity = data.conversations.slice(0, 5);
                
                recentActivity.forEach(convo => {
                    const lastMessage = convo.recent_messages && convo.recent_messages[0];
                    if (lastMessage) {
                        html += `<div style="padding: 10px; border-bottom: 1px solid #e2e8f0;">
                            <strong>${convo.phone_number}</strong>
                            <div style="font-size: 0.85em; color: #718096; margin-top: 5px;">
                                "${lastMessage.user_message.substring(0, 50)}..."
                            </div>
                            <div style="font-size: 0.75em; color: #a0aec0; margin-top: 5px;">
                                ${new Date(lastMessage.timestamp).toLocaleString()}
                            </div>
                        </div>`;
                    }
                });

                document.getElementById('activity-feed').innerHTML = html || '<div class="loading">No recent activity</div>';

            } catch (error) {
                document.getElementById('activity-feed').innerHTML = `<div class="error">Failed to load activity: ${error.message}</div>`;
            }
        }

        // Load conversations
        async function loadConversations() {
            try {
                const response = await fetch('/admin/data/conversations');
                const data = await response.json();
                
                if (data.error) {
                    document.getElementById('conversations-list').innerHTML = `<div class="error">Error: ${data.error}</div>`;
                    return;
                }

                allConversations = data.conversations;
                displayConversations(allConversations);

            } catch (error) {
                document.getElementById('conversations-list').innerHTML = `<div class="error">Failed to load conversations: ${error.message}</div>`;
            }
        }

        // Display conversations
        function displayConversations(conversations) {
            let html = '';
            
            conversations.forEach(convo => {
                if (convo.recent_messages && convo.recent_messages.length > 0) {
                    convo.recent_messages.forEach(msg => {
                        const agentBadge = msg.agent === 'claude' ? 
                            '<span class="badge badge-info">Claude</span>' : 
                            '<span class="badge badge-warning">OpenAI</span>';

                        html += `<div style="border: 1px solid #e2e8f0; border-radius: 6px; padding: 15px; margin-bottom: 15px;">
                            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;">
                                <strong>${convo.phone_number}</strong>
                                <div>
                                    ${agentBadge}
                                    <span style="font-size: 0.75em; color: #718096; margin-left: 10px;">
                                        ${new Date(msg.timestamp).toLocaleString()}
                                    </span>
                                </div>
                            </div>
                            <div style="background: #f7fafc; padding: 10px; border-radius: 4px; margin-bottom: 10px;">
                                <strong>User:</strong> ${msg.user_message}
                            </div>
                            <div style="background: #e6fffa; padding: 10px; border-radius: 4px;">
                                <strong>Bot:</strong> ${msg.bot_response}
                            </div>
                        </div>`;
                    });
                }
            });

            document.getElementById('conversations-list').innerHTML = html || '<div class="loading">No conversations found</div>';
        }

        // View user details
        async function viewUser(phone) {
            try {
                const response = await fetch(`/admin/data/user/${encodeURIComponent(phone)}`);
                const data = await response.json();
                
                document.getElementById('modal-body').innerHTML = `
                    <div class="json-display">${JSON.stringify(data, null, 2)}</div>
                `;
                
                document.getElementById('user-modal').style.display = 'block';
            } catch (error) {
                alert(`Failed to load user details: ${error.message}`);
            }
        }

        // Clear user data
        async function clearUser(phone) {
            if (!confirm(`Clear ALL data for ${phone}? This cannot be undone!`)) return;
            
            try {
                const response = await fetch(`/admin/data/clear-user/${encodeURIComponent(phone)}`, {
                    method: 'POST'
                });
                const data = await response.json();
                
                alert(`User data cleared: ${JSON.stringify(data.cleared)}`);
                loadUsers(); // Refresh user list
            } catch (error) {
                alert(`Failed to clear user: ${error.message}`);
            }
        }

        // Filter users
        function filterUsers() {
            const searchTerm = document.getElementById('user-search').value.toLowerCase();
            const filteredUsers = allUsers.filter(user => 
                user.phone_number.toLowerCase().includes(searchTerm)
            );
            displayUsers(filteredUsers);
        }

        // Filter conversations
        function filterConversations() {
            const agentFilter = document.getElementById('agent-filter').value;
            let filteredConversations = allConversations;
            
            if (agentFilter) {
                filteredConversations = allConversations.filter(convo => 
                    convo.recent_messages && convo.recent_messages.some(msg => msg.agent === agentFilter)
                );
            }
            
            displayConversations(filteredConversations);
        }

        // Close modal
        function closeModal() {
            document.getElementById('user-modal').style.display = 'none';
        }

        // Close modal when clicking outside
        window.onclick = function(event) {
            const modal = document.getElementById('user-modal');
            if (event.target === modal) {
                modal.style.display = 'none';
            }
        }
    </script>
</body>
</html>
    """

# ===== SUPPORTING API ENDPOINTS =====
# (These use the endpoints I created earlier - just add them to your main.py)

@app.get("/admin/data/users")
async def get_dashboard_users():
    """Get users data for dashboard"""
    try:
        if not db_service:
            return {"error": "Database not available"}
        
        # Get all users from personality engine (in-memory data)
        users = []
        for phone, profile in personality_engine.user_profiles.items():
            users.append({
                "phone_number": phone,
                "personality_data": profile,
                "plan_type": "free"  # Default for now
            })
        
        return {
            "total_users": len(users),
            "users": users
        }
        
    except Exception as e:
        logger.error(f"Error fetching dashboard users: {e}")
        return {"error": str(e)}

@app.get("/admin/data/conversations") 
async def get_dashboard_conversations():
    """Get conversations data for dashboard"""
    try:
        all_conversations = []
        
        for phone, profile in personality_engine.user_profiles.items():
            user_convo = {
                "phone_number": phone,
                "total_messages": profile.get("learning_data", {}).get("total_messages", 0),
                "communication_style": profile.get("communication_style", {}),
                "recent_messages": []
            }
            
            # Try to get recent conversations from cache
            if cache_service:
                try:
                    thread_key = f"conversation_thread:{phone}"
                    recent_messages = await cache_service.get_list(thread_key, limit=5)
                    user_convo["recent_messages"] = recent_messages or []
                except Exception as e:
                    logger.warning(f"Could not fetch conversations for {phone}: {e}")
            
            all_conversations.append(user_convo)
        
        return {
            "total_active_users": len(all_conversations),
            "conversations": all_conversations
        }
        
    except Exception as e:
        logger.error(f"Error fetching conversations: {e}")
        return {"error": str(e)}

@app.get("/admin/data/analytics")
async def get_dashboard_analytics():
    """Get analytics data for dashboard"""
    try:
        total_users = len(personality_engine.user_profiles)
        total_messages = sum(
            profile.get("learning_data", {}).get("total_messages", 0) 
            for profile in personality_engine.user_profiles.values()
        )
        active_today = sum(
            1 for profile in personality_engine.user_profiles.values()
            if profile.get("learning_data", {}).get("total_messages", 0) > 0
        )
        
        return {
            "timestamp": datetime.now().isoformat(),
            "users": {
                "total": total_users,
                "active_today": active_today,
                "total_messages": total_messages
            },
            "system": {
                "agent_type": get_agent_type(),
                "claude_available": claude_agent is not None,
                "openai_available": openai_agent is not None
            }
        }
        
    except Exception as e:
        logger.error(f"Error generating analytics: {e}")
        return {"error": str(e)}

@app.get("/admin/data/user/{phone_number}")
async def get_user_details(phone_number: str):
    """Get detailed user information for dashboard"""
    try:
        clean_phone = phone_number.replace('+', '').replace('-', '').replace('(', '').replace(')', '').replace(' ', '')
        if not clean_phone.startswith('+'):
            clean_phone = f"+{clean_phone}"
        
        # Get personality data
        personality_data = personality_engine.user_profiles.get(clean_phone, {})
        
        # Get recent conversations
        conversations = []
        if cache_service:
            try:
                thread_key = f"conversation_thread:{clean_phone}"
                recent_messages = await cache_service.get_list(thread_key, limit=10)
                conversations = recent_messages or []
            except Exception as e:
                logger.warning(f"Could not fetch conversations: {e}")
        
        return {
            "phone_number": clean_phone,
            "personality_data": personality_data,
            "recent_conversations": conversations,
            "total_conversations": len(conversations)
        }
        
    except Exception as e:
        logger.error(f"Error fetching user details: {e}")
        return {"error": str(e)}

@app.post("/admin/data/clear-user/{phone_number}")
async def clear_user_data(phone_number: str):
    """Clear user data for dashboard"""
    try:
        clean_phone = phone_number.replace('+', '').replace('-', '').replace('(', '').replace(')', '').replace(' ', '')
        if not clean_phone.startswith('+'):
            clean_phone = f"+{clean_phone}"
        
        results = {"phone_number": clean_phone, "cleared": []}
        
        # Clear from personality engine
        if clean_phone in personality_engine.user_profiles:
            del personality_engine.user_profiles[clean_phone]
            results["cleared"].append("personality_data")
        
        # Clear from cache (conversations)
        if cache_service:
            try:
                thread_key = f"conversation_thread:{clean_phone}"
                # Clear conversation history
                results["cleared"].append("cached_conversations")
            except Exception as e:
                results["cache_error"] = str(e)
        
        return results
        
    except Exception as e:
        logger.error(f"Error clearing user data: {e}")
        return {"error": str(e)}
